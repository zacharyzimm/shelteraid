from fastapi import FastAPI, File, UploadFile, Form
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse, Response
from PIL import Image
import io
import requests
import numpy as np
from fastapi.logger import logger
import logging

gunicorn_logger = logging.getLogger('gunicorn.error')
logger.handlers = gunicorn_logger.handlers
if __name__ != "main":
    logger.setLevel(gunicorn_logger.level)
else:
    logger.setLevel(logging.DEBUG)

app = FastAPI()

def get_ec2_public_ip():
    try:
        response = requests.get('http://169.254.169.254/latest/meta-data/public-ipv4')
        response.raise_for_status()
        logger.info(f"Found Public IP of {response.text}")
        return response.text
    except requests.RequestException as e:
        print(f"Error getting EC2 public IP address: {e}")
        return None


instance_ip = get_ec2_public_ip()

instance_address = f"http://{instance_ip}"

logger.info(f"Adding {instance_address} to allowed origins")

origins = ["http://shelteraid-frontend:80", "http://localhost:80", instance_address, f"{instance_address}:80"]

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

def _load_image(content):
    img = Image.open(io.BytesIO(content))
    if img.mode == "RGBA":
        img = img.convert("RGB")
    return np.array(img)

def _image_to_array(image):
    # Convert the image to a NumPy array
    image_array = np.array(image)
    return image_array.tolist()

@app.post(
    "/invoke_model/",
    # Set what the media type will be in the autogenerated OpenAPI specification.
    # fastapi.tiangolo.com/advanced/additional-responses/#additional-media-types-for-the-main-response
    responses={200: {"content": {"image/png": {}}}},
    # Prevent FastAPI from adding "application/json" as an additional
    # response media type in the autogenerated OpenAPI specification.
    # https://github.com/tiangolo/fastapi/issues/3258
    response_class=Response,
)
async def invoke_model(file: UploadFile = File(...), model: str = Form(...)):
    try:
        logger.info("Reading file")
        # Read the uploaded file
        content = await file.read()
        image = _load_image(content)

        # Simulate model processing (replace this with actual model inference code)
        model_payload = {"input": _image_to_array(image)}

        if model == "YOLOv8":
            MODEL_API_URL = "http://yolov8-model:8080"
        elif model == "FasterRCNN":
            MODEL_API_URL = "http://fasterrcnn-model:8081"

        logger.info(f"Sending request to {MODEL_API_URL}")

        # Send the POST request with the JSON payload
        response = requests.post(url=f"{MODEL_API_URL}/predict", json=model_payload)

        logger.info(f"Received response with status code {response.status_code}")

        # Get the output from the response and convert it to a bytes object
        output_image = response.json().get("output")[
            0
        ]  # only use the first returned image

        image_array = np.array(output_image, dtype=np.uint8)
        # Convert the NumPy array to an image
        output_image = Image.fromarray(image_array)

        img_byte_arr = io.BytesIO()
        output_image.save(img_byte_arr, format="PNG")
        img_byte_arr = img_byte_arr.getvalue()

        # media_type here sets the media type of the actual response sent to the client.
        return Response(content=img_byte_arr, media_type="image/png")

    except Exception as e:
        logging.exception(f"Error invoking model:\n{e}")
        return JSONResponse(content={"error": str(e)}, status_code=500)

@app.get("/health")
def health_check():
    logger.info("Health check triggered")
    return "I'm alive!"
